Aggregate [sum(volume#3341) AS sum(volume)#3351]
+- Project [UDF(l_extendedprice#84, l_discount#85) AS volume#3341]
   +- Join Inner, ((((((((p_brand#267 = Brand#12) AND UDF(p_container#270)) AND (l_quantity#83 >= 1.0)) AND (l_quantity#83 <= 11.0)) AND (p_size#269L <= 5)) OR (((((p_brand#267 = Brand#23) AND UDF(p_container#270)) AND (l_quantity#83 >= 10.0)) AND (l_quantity#83 <= 20.0)) AND (p_size#269L <= 10))) OR (((((p_brand#267 = Brand#34) AND UDF(p_container#270)) AND (l_quantity#83 >= 20.0)) AND (l_quantity#83 <= 30.0)) AND (p_size#269L <= 15))) AND (l_partkey#80L = p_partkey#264L))
      :- Project [p_partkey#264L, p_brand#267, p_size#269L, p_container#270]
      :  +- Filter ((p_size#269L >= 1) AND (((((p_brand#267 = Brand#12) AND UDF(p_container#270)) AND (p_size#269L <= 5)) OR (((p_brand#267 = Brand#23) AND UDF(p_container#270)) AND (p_size#269L <= 10))) OR (((p_brand#267 = Brand#34) AND UDF(p_container#270)) AND (p_size#269L <= 15))))
      :     +- SerializeFromObject [knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_partkey AS p_partkey#264L, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_name, true, false, true) AS p_name#265, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_mfgr, true, false, true) AS p_mfgr#266, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_brand, true, false, true) AS p_brand#267, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_type, true, false, true) AS p_type#268, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_size AS p_size#269L, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_container, true, false, true) AS p_container#270, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_retailprice AS p_retailprice#271, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Part, true])).p_comment, true, false, true) AS p_comment#272]
      :        +- MapElements main.scala.TpchSchemaProvider$$Lambda$1708/0x0000000840d24040@58267ba1, class [Ljava.lang.String;, [StructField(value,ArrayType(StringType,true),true)], obj#263: main.scala.Part
      :           +- MapElements main.scala.TpchSchemaProvider$$Lambda$1707/0x0000000840d23040@1c0a143, class java.lang.String, [StructField(value,StringType,true)], obj#249: [Ljava.lang.String;
      :              +- DeserializeToObject value#240.toString, obj#248: java.lang.String
      :                 +- Relation [value#240] text
      +- Project [l_partkey#80L, l_quantity#83, l_extendedprice#84, l_discount#85]
         +- Filter ((isnotnull(l_shipinstruct#92) AND (((l_shipmode#93 = AIR) OR (l_shipmode#93 = AIR REG)) AND (l_shipinstruct#92 = DELIVER IN PERSON))) AND ((((l_quantity#83 >= 1.0) AND (l_quantity#83 <= 11.0)) OR ((l_quantity#83 >= 10.0) AND (l_quantity#83 <= 20.0))) OR ((l_quantity#83 >= 20.0) AND (l_quantity#83 <= 30.0))))
            +- SerializeFromObject [knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_orderkey AS l_orderkey#79L, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_partkey AS l_partkey#80L, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_suppkey AS l_suppkey#81L, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_linenumber AS l_linenumber#82L, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_quantity AS l_quantity#83, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_extendedprice AS l_extendedprice#84, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_discount AS l_discount#85, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_tax AS l_tax#86, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_returnflag, true, false, true) AS l_returnflag#87, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_linestatus, true, false, true) AS l_linestatus#88, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_shipdate, true, false, true) AS l_shipdate#89, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_commitdate, true, false, true) AS l_commitdate#90, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_receiptdate, true, false, true) AS l_receiptdate#91, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_shipinstruct, true, false, true) AS l_shipinstruct#92, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_shipmode, true, false, true) AS l_shipmode#93, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, knownnotnull(assertnotnull(input[0, main.scala.Lineitem, true])).l_comment, true, false, true) AS l_comment#94]
               +- MapElements main.scala.TpchSchemaProvider$$Lambda$1700/0x0000000840d17840@2835b3d1, class [Ljava.lang.String;, [StructField(value,ArrayType(StringType,true),true)], obj#78: main.scala.Lineitem
                  +- MapElements main.scala.TpchSchemaProvider$$Lambda$1699/0x0000000840d15040@690c3b1f, class java.lang.String, [StructField(value,StringType,true)], obj#57: [Ljava.lang.String;
                     +- DeserializeToObject value#48.toString, obj#56: java.lang.String
                        +- Relation [value#48] text
